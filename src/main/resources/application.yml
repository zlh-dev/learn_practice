spring:
  application:
    name: learn-practice
  profiles:
    # 配置文件选择
    active: test
  ## 横幅设置 ##
  banner:
    # banner 文本文件路径
    location: classpath:banner.txt
    # banner 文件编码
    charset: UTF-8
  main:
    # banner 模式。有三种模式：console/log/off
    # console - 打印到控制台（通过 System.out）
    # log - 打印到日志中
    # off - 关闭打印
    # 是否开启启动图（默认console）
    banner-mode: off
  output:
    ansi:
      # 检查终端是否支持ANSI，是的话就采用彩色输出
      enabled: detect
  #### 数据源配置 ####
  datasource:
    ## jdbc配置 ##
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/example?autoReconnect=true&useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=UTC
    username: root
    password: root
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      ## 连接池配置 ##
      # 初始化连接池个数
      initial-size: 5
      # 最大连接池个数
      max-active: 20
      # 配置获取连接等待超时的时间，单位毫秒，缺省启用公平锁，并发效率会有所下降
      max-wait: 60000
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 用来检测连接是否有效的sql，要求是一个查询语句。
      # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
      validation-query: SELECT 1 FROM DUAL
      validation-query-timeout: 60000
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false
      # 建议配置为true，不影响性能，并且保证安全性。
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 600000
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true

      ## 监控配置 ##
      # 通过别名的方式配置扩展插件，多个英文逗号分隔，常用的插件有：
      # 监控统计用的filter:stat
      # 日志用的filter:log4j
      # 防御sql注入的filter:wall
      filters: stat,wall,logback
      # WebStatFilter配置
      web-stat-filter:
        # 是否启用StatFilter,默认值false
        enabled: true
        # 经常需要排除一些不必要的url，比如*.js,/jslib/*等等
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        # session统计功能
        session-stat-enable: true
        # 缺省sessionStatMaxCount是1000个。你可以按需要进行配置
        session-stat-max-count: 1000
        # 你可以配置principalSessionName，使得druid能够知道当前的session的用户是谁,根据需要，把其中的xxx.user修改为你user信息保存在cookie中的cookieName
        principal-cookie-name: xxx.user
        # 配置profileEnable能够监控单个url调用的sql列表
        profile-enable: true
      # StatViewServlet配置: 提供监控信息展示的html页面,提供监控信息的JSON API
      stat-view-servlet:
        # 是否启用StatViewServlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）
        enabled: true
        # 允许清空统计数据,执行这个操作之后，会导致所有计数器清零，重新计数
        reset-enable: true
        # 用户名
        login-username: druid
        # 密码
        login-password: druid
        # ip白名单,没有配置或者为空，则允许所有访问
        # allow:
        # ip黑名单
        # deny:
      # Spring监控配置,配置_Druid和Spring关联监控配置
      # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
      # aop-patterns:

  #### jackson配置 ####
  jackson:
    # 设置属性命名策略,对应jackson下PropertyNamingStrategy中的常量值，SNAKE_CASE-返回的json驼峰式转下划线，json body下划线传到后端自动转驼峰式
    property-naming-strategy: SNAKE_CASE
    # 指定日期格式化
    date-format: yyyy-MM-dd HH:mm:ss
    # 当地时区
    locale: zh
    # 设置全局时区
    time-zone: "Asia/Shanghai"
    serialization:
      # 格式化输出
      indent_output: false
      # 忽略无法转换的对象
      fail_on_empty_beans: false
      # 时间转换为时间戳
      write_dates_as_timestamps: false
    # 设置空如何序列化
    # 不为空的属性才会序列化,具体属性可看JsonInclude.Include
    default-property-inclusion: NON_NULL
    # 枚举类DeserializationFeature中的枚举属性为key，值为boolean设置jackson反序列化特性,具体key请看DeserializationFeature源码
    deserialization:
      # 常用,json中含pojo不存在属性时是否失败报错,默认true
      fail_on_unknown_properties: false
    # 枚举类MapperFeature中的枚举属性为key，值为boolean设置jackson ObjectMapper特性
    # ObjectMapper在jackson中负责json的读写、json与pojo的互转、json tree的互转,具体特性请看MapperFeature,常规默认即可
    mapper:
      # 使用getter取代setter探测属性，如类中含getName()但不包含name属性与setName()，传输的vo json格式模板中依旧含name属性,默认false
      use_getters_as_setters: true
    # 枚举类JsonParser.Feature枚举类中的枚举属性为key，值为boolean设置jackson JsonParser特性
    # JsonParser在jackson中负责json内容的读取,具体特性请看JsonParser.Feature，一般无需设置默认即可
    parser:
      # 是否允许出现单引号,默认false
      allow_single_quotes: true
      # 允许出现特殊字符和转义符
      allow_unquoted_control_chars: true

  redis:
    # 服务器地址
    host: 127.0.0.1
    # 服务器连接端口
    port: 6379
    # 服务器连接密码(默认为空)
    password:
    # 数据库索引(默认为0)
    database: 0
    # 连接超时时间（毫秒）
    timeout: 1000
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 20
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1
        # 连接池中的最大空闲连接
        max-idle: 10
        # 连接池中的最小空闲连接
        min-idle: 0


#### mybatis-plus配置 ####
mybatis-plus:
  mapper-locations: classpath:mapper/*Mapper.xml
  type-aliases-package: com.code.entity
  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查
  check-config-location: false
  # 指定 MyBatis 的执行器, 默认值simple
  # simple：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句（PreparedStatement）
  # reuse：该执行器类型会复用预处理语句（PreparedStatement）
  # batch：该执行器类型会批量执行所有的更新语句
  executor-type: reuse
  # mybatis 的原生配置
  configuration:
    # 是否开启二级缓存，默认为 true
    cache-enabled: true
    # 是否开启自动驼峰命名规则（camel case）映射
    map-underscore-to-camel-case: true
    # 指定当结果集中值为 null 的时候是否调用映射对象的 Setter（Map 对象时为 put）方法，通常运用于有 Map.keySet() 依赖或 null 值初始化的情况
    # 通俗的讲，即 MyBatis 在使用 resultMap 来映射查询结果中的列，如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段，这就导致在调用到该字段的时候由于没有映射，取不到而报空指针异常
    call-setters-on-nulls: true
    # 如果type为空
    jdbc-type-for-null: 'null'
    # MyBatis 自动映射策略，通过该配置可指定 MyBatis 是否并且如何来自动映射数据表字段与对象的属性
    # none：不启用自动映射
    # partial：只对非嵌套的 resultMap 进行自动映射
    # full：对所有的 resultMap 都进行自动映射
    auto-mapping-behavior: partial
    # MyBatis 自动映射时未知列或未知属性处理策略，通过该配置可指定 MyBatis 在自动映射过程中遇到未知列或者未知属性时如何处理
    # none：不做任何处理 (默认值)
    # warning：以日志的形式打印相关警告信息
    # failing：当作映射失败处理，并抛出异常和详细信息
    auto-mapping-unknown-column-behavior: warning
    # Mybatis一级缓存，默认为 session
    # session session级别缓存，同一个session相同查询语句不会再次查询数据库
    # statement 关闭一级缓存
    # 单服务架构中（有且仅有只有一个程序提供相同服务），一级缓存开启不会影响业务，只会提高性能。 微服务架构中需要关闭一级缓存，原因：Service1先查询数据，若之后Service2修改了数据，之后Service1又再次以同样的查询条件查询数据，因走缓存会出现查处的数据不是最新数据
    local-cache-scope: session
  # MyBatis-Plus 全局策略配置
  global-config:
    # 是否控制台 print mybatis-plus 的 LOGO
    banner: false
    db-config:
      # 全局默认主键类型，AUTO:"数据库ID自增", INPUT:"用户输入ID", ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID"
      id-type: ID_WORKER
      #全局逻辑删除字段值 3.3.0开始支持
      logic-delete-field: deleted
      # 逻辑已删除值(默认为 1)
      logic-delete-value: true
      # 逻辑未删除值(默认为 0)
      logic-not-delete-value: false
      # 字段验证策略之 insert,在 insert 的时候的字段验证策略
      insert-strategy: not_null
      # 字段验证策略之 update,在 update 的时候的字段验证策略
      update-strategy: not_null
      # 字段验证策略之 select,在 select 的时候的字段验证策略既 wrapper 根据内部 entity 生成的 where 条件
      select-strategy: not_null

#### 分页插件PageHelper配置 ####
pagehelper:
  # 分页的合理化数据, 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据
  reasonable: true
  # 支持通过 Mapper 接口参数来传递分页参数，默认值 false, 分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页
  support-methods-arguments: true
  # 配置参数映射，用于从对象中根据属性名取值
  params: count=countSql
  # 默认值为 false ，该参数对使用 RowBounds 作为分页参数时有效。当该参数设置为 true 时，使用 RowBounds 分页会进行 count 查询。
  row-bounds-with-count: true
  # 配置数据库方言
  helper-dialect: mysql
  # 如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）
  page-size-zero: true
  # 在运行时根据多数据源自动识别对应方言的分页
  auto-runtime-dialect: true

#### actuator配置 ####
management:
  server:
    # Actuator Web 访问端口
    port: 8081
  endpoint:
    health:
      show-details: always
#### log设置 ####
logging:
  level:
    root: info
    com.code.mapper: debug